// <auto-generated />
using System;
using EFCoreAssignment_DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreAssignment_DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250126131302_Re_SeedDataIntoProjects")]
    partial class Re_SeedDataIntoProjects
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCoreAssignment_Models.Models.Departments", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Departments", "EfCore");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentName = "CEO",
                            ManagerId = 5
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentName = "Sales",
                            ManagerId = 2
                        },
                        new
                        {
                            DepartmentId = 3,
                            DepartmentName = "IT",
                            ManagerId = 3
                        },
                        new
                        {
                            DepartmentId = 4,
                            DepartmentName = "Marketing",
                            ManagerId = 5
                        });
                });

            modelBuilder.Entity("EFCoreAssignment_Models.Models.EmployeeDetails", b =>
                {
                    b.Property<int>("EmployeeDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeDetailsId"));

                    b.Property<string>("AadharNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeDetailsId");

                    b.HasIndex("AadharNumber")
                        .IsUnique();

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeDetails", "EfCore");

                    b.HasData(
                        new
                        {
                            EmployeeDetailsId = 1,
                            AadharNumber = "527487659876",
                            Address = "Whitmore",
                            EmployeeId = 1
                        },
                        new
                        {
                            EmployeeDetailsId = 2,
                            AadharNumber = "527487659877",
                            Address = "B Mystic Falls",
                            EmployeeId = 2
                        },
                        new
                        {
                            EmployeeDetailsId = 3,
                            AadharNumber = "527487659878",
                            Address = "C Mystic Falls",
                            EmployeeId = 3
                        },
                        new
                        {
                            EmployeeDetailsId = 4,
                            AadharNumber = "527487659879",
                            Address = "New Orleans",
                            EmployeeId = 4
                        },
                        new
                        {
                            EmployeeDetailsId = 5,
                            AadharNumber = "527487659880",
                            Address = "E Mystic Falls",
                            EmployeeId = 5
                        });
                });

            modelBuilder.Entity("EFCoreAssignment_Models.Models.EmployeeProject", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("EmployeeProject", "EfCore");
                });

            modelBuilder.Entity("EFCoreAssignment_Models.Models.Employees", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<double>("CommissionPct")
                        .HasColumnType("float");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Employees", "EfCore", t =>
                        {
                            t.HasCheckConstraint("CK_Employees_Salary", "Salary > 0");
                        });

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            CommissionPct = 0.10000000000000001,
                            DepartmentId = 2,
                            Email = "aaron@ms",
                            FirstName = "Aaron",
                            HireDate = new DateTime(2025, 1, 26, 18, 43, 2, 207, DateTimeKind.Local).AddTicks(866),
                            JobId = "SA_REP",
                            LastName = "Whitmore",
                            ManagerId = 2,
                            PhoneNumber = "515.123.4567",
                            Salary = 35000.0
                        },
                        new
                        {
                            EmployeeId = 2,
                            CommissionPct = 0.20000000000000001,
                            DepartmentId = 3,
                            Email = "bonnie@ms",
                            FirstName = "Bonnie",
                            HireDate = new DateTime(2025, 1, 26, 18, 43, 2, 207, DateTimeKind.Local).AddTicks(877),
                            JobId = "IT_REP",
                            LastName = "Bennett",
                            ManagerId = 3,
                            PhoneNumber = "515.123.4568",
                            Salary = 40000.0
                        },
                        new
                        {
                            EmployeeId = 3,
                            CommissionPct = 0.20000000000000001,
                            DepartmentId = 3,
                            Email = "caroline@ms",
                            FirstName = "Caroline",
                            HireDate = new DateTime(2025, 1, 26, 18, 43, 2, 207, DateTimeKind.Local).AddTicks(879),
                            JobId = "IT_PROG",
                            LastName = "Forbes",
                            ManagerId = 3,
                            PhoneNumber = "515.123.4569",
                            Salary = 35000.0
                        },
                        new
                        {
                            EmployeeId = 4,
                            CommissionPct = 0.29999999999999999,
                            DepartmentId = 4,
                            Email = "damon@ms",
                            FirstName = "Damon",
                            HireDate = new DateTime(2025, 1, 26, 18, 43, 2, 207, DateTimeKind.Local).AddTicks(881),
                            JobId = "MARK_REP",
                            LastName = "Salvatore",
                            ManagerId = 5,
                            PhoneNumber = "515.123.4570",
                            Salary = 45000.0
                        },
                        new
                        {
                            EmployeeId = 5,
                            CommissionPct = 1.0,
                            DepartmentId = 1,
                            Email = "elena@ms",
                            FirstName = "Elena",
                            HireDate = new DateTime(2025, 1, 26, 18, 43, 2, 207, DateTimeKind.Local).AddTicks(882),
                            JobId = "CEO",
                            LastName = "Gilbert",
                            ManagerId = 5,
                            PhoneNumber = "515.123.4571",
                            Salary = 50000.0
                        });
                });

            modelBuilder.Entity("EFCoreAssignment_Models.Models.Jobs", b =>
                {
                    b.Property<string>("JobId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MaxSalary")
                        .HasColumnType("int");

                    b.Property<int>("MinSalary")
                        .HasColumnType("int");

                    b.HasKey("JobId");

                    b.ToTable("Jobs", "EfCore");

                    b.HasData(
                        new
                        {
                            JobId = "SA_REP",
                            JobTitle = "Sales Representative",
                            MaxSalary = 100000,
                            MinSalary = 10000
                        },
                        new
                        {
                            JobId = "IT_REP",
                            JobTitle = "IT Representative",
                            MaxSalary = 100000,
                            MinSalary = 10000
                        },
                        new
                        {
                            JobId = "MARK_REP",
                            JobTitle = "Marketing Representative",
                            MaxSalary = 100000,
                            MinSalary = 10000
                        },
                        new
                        {
                            JobId = "IT_PROG",
                            JobTitle = "IT Programmer",
                            MaxSalary = 100000,
                            MinSalary = 10000
                        },
                        new
                        {
                            JobId = "CEO",
                            JobTitle = "Chief Executive Officer",
                            MaxSalary = 100000,
                            MinSalary = 10000
                        });
                });

            modelBuilder.Entity("EFCoreAssignment_Models.Models.Projects", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects", "EfCore");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            ProjectName = "P001"
                        },
                        new
                        {
                            ProjectId = 2,
                            ProjectName = "P002"
                        },
                        new
                        {
                            ProjectId = 3,
                            ProjectName = "P003"
                        },
                        new
                        {
                            ProjectId = 4,
                            ProjectName = "P004"
                        },
                        new
                        {
                            ProjectId = 5,
                            ProjectName = "P005"
                        });
                });

            modelBuilder.Entity("EFCoreAssignment_Models.Models.Departments", b =>
                {
                    b.HasOne("EFCoreAssignment_Models.Models.Employees", "Managers")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Managers");
                });

            modelBuilder.Entity("EFCoreAssignment_Models.Models.EmployeeDetails", b =>
                {
                    b.HasOne("EFCoreAssignment_Models.Models.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EFCoreAssignment_Models.Models.EmployeeProject", b =>
                {
                    b.HasOne("EFCoreAssignment_Models.Models.Employees", "Employees")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreAssignment_Models.Models.Projects", "Projects")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("EFCoreAssignment_Models.Models.Employees", b =>
                {
                    b.HasOne("EFCoreAssignment_Models.Models.Departments", "Departments")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreAssignment_Models.Models.Jobs", "Jobs")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreAssignment_Models.Models.Employees", "Managers")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("Jobs");

                    b.Navigation("Managers");
                });

            modelBuilder.Entity("EFCoreAssignment_Models.Models.Employees", b =>
                {
                    b.Navigation("EmployeeProjects");
                });

            modelBuilder.Entity("EFCoreAssignment_Models.Models.Projects", b =>
                {
                    b.Navigation("EmployeeProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
