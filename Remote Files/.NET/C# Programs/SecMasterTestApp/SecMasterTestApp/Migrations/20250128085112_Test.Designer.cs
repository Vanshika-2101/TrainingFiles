// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecMasterTestApp.Models;

#nullable disable

namespace SecMasterTestApp.Migrations
{
    [DbContext(typeof(SecmasterGroup3Context))]
    [Migration("20250128085112_Test")]
    partial class Test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("Bond_Pricing_Sequence");

            modelBuilder.HasSequence<int>("Bond_risk_Sequence");

            modelBuilder.HasSequence<int>("Bond_Schedule_type_Sequence");

            modelBuilder.HasSequence<int>("Bond_security_Sequence");

            modelBuilder.HasSequence<int>("Bond_Summary_Sequence");

            modelBuilder.HasSequence<int>("Entity_Summary_Sequence");

            modelBuilder.HasSequence<int>("Equity_Dividend_Sequence");

            modelBuilder.HasSequence<int>("Equity_Pricing_Sequence");

            modelBuilder.HasSequence<int>("Equity_Reference_data_Sequence");

            modelBuilder.HasSequence<int>("Equity_risk_Sequence");

            modelBuilder.HasSequence<int>("Equity_security_Sequence");

            modelBuilder.HasSequence<int>("Identifier_Sequence");

            modelBuilder.HasSequence<int>("Identifier_type_Sequence");

            modelBuilder.HasSequence<int>("Pricing_Sequence");

            modelBuilder.HasSequence<int>("Reference_data_Sequence");

            modelBuilder.HasSequence<int>("Regulatory_details_Sequence");

            modelBuilder.HasSequence<int>("Schedule_type_Sequence");

            modelBuilder.HasSequence<int>("Security_type_id_Sequence");

            modelBuilder.HasSequence<int>("SecurityID_Sequence");

            modelBuilder.Entity("SecMasterTestApp.Models.BondPricingDetail", b =>
                {
                    b.Property<int>("BondPricingDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bond_pricing_details_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Bond_Pricing_Sequence])");

                    b.Property<decimal?>("HighPrice")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("high_price");

                    b.Property<decimal?>("LowPrice")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("low_price");

                    b.Property<int>("PricingDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("pricing_details_id");

                    b.HasKey("BondPricingDetailsId")
                        .HasName("PK__Bond_Pri__FF889DA12D0FBC2E");

                    b.HasIndex("PricingDetailsId");

                    b.ToTable("Bond_Pricing_Details", (string)null);
                });

            modelBuilder.Entity("SecMasterTestApp.Models.BondRisk", b =>
                {
                    b.Property<int>("BondRiskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bond_risk_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Bond_risk_Sequence])");

                    b.Property<decimal?>("AverageVol30d")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("average_vol_30d");

                    b.Property<decimal>("Convexity")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("convexity");

                    b.Property<decimal>("Duration")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("duration");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("security_id");

                    b.Property<decimal?>("Volatility30d")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("volatility_30d");

                    b.Property<decimal?>("Volatility90d")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("volatility_90d");

                    b.HasKey("BondRiskId")
                        .HasName("PK__Bond_Ris__0C9B4377C6A75968");

                    b.HasIndex("SecurityId");

                    b.ToTable("Bond_Risk", (string)null);
                });

            modelBuilder.Entity("SecMasterTestApp.Models.BondSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("schedule_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Bond_Schedule_type_Sequence])");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime")
                        .HasColumnName("schedule_date");

                    b.Property<decimal?>("SchedulePrice")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("schedule_price");

                    b.Property<int?>("ScheduleType")
                        .HasColumnType("int")
                        .HasColumnName("schedule_type");

                    b.Property<int?>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("security_id");

                    b.HasKey("ScheduleId")
                        .HasName("PK__Bond_Sch__C46A8A6FA49BCBD0");

                    b.HasIndex("ScheduleType");

                    b.HasIndex("SecurityId");

                    b.ToTable("Bond_Schedules", (string)null);
                });

            modelBuilder.Entity("SecMasterTestApp.Models.BondScheduleType", b =>
                {
                    b.Property<int>("ScheduleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("schedule_type_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Schedule_type_Sequence])");

                    b.Property<string>("ScheduleType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("schedule_type");

                    b.HasKey("ScheduleTypeId")
                        .HasName("PK__Bond_Sch__C4D44B8B038A7F60");

                    b.ToTable("Bond_Schedule_type", (string)null);
                });

            modelBuilder.Entity("SecMasterTestApp.Models.BondSecurityDetail", b =>
                {
                    b.Property<int>("BondSecurityDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bond_security_detail_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Bond_security_Sequence])");

                    b.Property<string>("CouponCap")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("coupon_cap");

                    b.Property<string>("CouponFloor")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("coupon_floor");

                    b.Property<string>("CouponFrequency")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("coupon_frequency");

                    b.Property<decimal?>("CouponRate")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("coupon_rate");

                    b.Property<string>("CouponType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("coupon_type");

                    b.Property<DateTime?>("FirstCouponDate")
                        .HasColumnType("datetime")
                        .HasColumnName("first_coupon_date");

                    b.Property<bool?>("HasPosition")
                        .HasColumnType("bit")
                        .HasColumnName("has_position");

                    b.Property<bool?>("IsCallable")
                        .HasColumnType("bit")
                        .HasColumnName("is_callable");

                    b.Property<bool?>("IsFixToFloat")
                        .HasColumnType("bit")
                        .HasColumnName("is_fix_to_float");

                    b.Property<bool?>("IsPutable")
                        .HasColumnType("bit")
                        .HasColumnName("is_putable");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("issue_date");

                    b.Property<DateTime?>("LastResetDate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_reset_date");

                    b.Property<DateTime>("MaturityDate")
                        .HasColumnType("datetime")
                        .HasColumnName("maturity_date");

                    b.Property<int?>("MaxCallNoticeDays")
                        .HasColumnType("int")
                        .HasColumnName("max_call_notice_days");

                    b.Property<int?>("MaxPutNoticeDays")
                        .HasColumnType("int")
                        .HasColumnName("max_put_notice_days");

                    b.Property<DateTime?>("PenCouponDate")
                        .HasColumnType("datetime")
                        .HasColumnName("pen_coupon_date");

                    b.Property<int?>("ResetFrequency")
                        .HasColumnType("int")
                        .HasColumnName("reset_frequency");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("security_id");

                    b.HasKey("BondSecurityDetailId")
                        .HasName("PK__Bond_Sec__5AA954FAE7B2CDEB");

                    b.HasIndex("SecurityId");

                    b.ToTable("Bond_Security_Details", (string)null);
                });

            modelBuilder.Entity("SecMasterTestApp.Models.BondsSecuritySummary", b =>
                {
                    b.Property<int>("BondSecuritySummaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bond_security_summary_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Bond_Summary_Sequence])");

                    b.Property<string>("AssetType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("asset_type");

                    b.Property<string>("InvestmentType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("investment_type");

                    b.Property<decimal?>("PricingFactor")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("pricing_factor");

                    b.Property<int?>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("security_id");

                    b.Property<decimal?>("TradingFactor")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("trading_factor");

                    b.HasKey("BondSecuritySummaryId")
                        .HasName("PK__Bonds_Se__2932B7603E13A3D3");

                    b.HasIndex("SecurityId");

                    b.ToTable("Bonds_Security_Summary", (string)null);
                });

            modelBuilder.Entity("SecMasterTestApp.Models.EquitiesSecuritySummary", b =>
                {
                    b.Property<int>("EquitySecuritySummaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("equity_security_summary_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Entity_Summary_Sequence])");

                    b.Property<string>("BloombergUniqueName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("bloomberg_unique_name");

                    b.Property<bool?>("HasPosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("has_position");

                    b.Property<int?>("RoundLotSize")
                        .HasColumnType("int")
                        .HasColumnName("round_lot_size");

                    b.Property<int?>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("security_id");

                    b.HasKey("EquitySecuritySummaryId")
                        .HasName("PK__Equities__A94CF7D5668EC77B");

                    b.HasIndex("SecurityId");

                    b.ToTable("Equities_Security_Summary", (string)null);
                });

            modelBuilder.Entity("SecMasterTestApp.Models.EquityDividendHistory", b =>
                {
                    b.Property<int>("DividendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dividend_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Equity_Dividend_Sequence])");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("DeclaredDate")
                        .HasColumnType("datetime")
                        .HasColumnName("declared_date");

                    b.Property<string>("DividendType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("dividend_type");

                    b.Property<DateTime?>("ExDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ex_date");

                    b.Property<string>("Frequency")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("frequency");

                    b.Property<DateTime?>("PayDate")
                        .HasColumnType("datetime")
                        .HasColumnName("pay_date");

                    b.Property<DateTime?>("RecordDate")
                        .HasColumnType("datetime")
                        .HasColumnName("record_date");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("security_id");

                    b.HasKey("DividendId")
                        .HasName("PK__Equity_D__7635F10C4475E724");

                    b.HasIndex("SecurityId");

                    b.ToTable("Equity_Dividend_History", (string)null);
                });

            modelBuilder.Entity("SecMasterTestApp.Models.EquityPricingDetail", b =>
                {
                    b.Property<int>("EquityPricingDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("equity_pricing_details_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Equity_Pricing_Sequence])");

                    b.Property<decimal?>("ClosePrice")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("close_price");

                    b.Property<decimal?>("PeRation")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("pe_ration");

                    b.Property<int>("PricingDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("pricing_details_id");

                    b.HasKey("EquityPricingDetailsId")
                        .HasName("PK__Equity_P__0E56F0FB01FD87C3");

                    b.HasIndex("PricingDetailsId");

                    b.ToTable("Equity_Pricing_Details", (string)null);
                });

            modelBuilder.Entity("SecMasterTestApp.Models.EquityReferenceDatum", b =>
                {
                    b.Property<int>("EquityReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("equity_reference_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Equity_Reference_data_Sequence])");

                    b.Property<string>("Exchange")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("exchange");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("int")
                        .HasColumnName("reference_id");

                    b.Property<string>("TradingCurrency")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("trading_currency");

                    b.HasKey("EquityReferenceId")
                        .HasName("PK__Equity_r__E294D24573C29034");

                    b.HasIndex("ReferenceId");

                    b.ToTable("Equity_reference_data", (string)null);
                });

            modelBuilder.Entity("SecMasterTestApp.Models.EquityRisk", b =>
                {
                    b.Property<int>("EquityRiskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("equity_risk_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Equity_risk_Sequence])");

                    b.Property<decimal>("AverageVolume20d")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("average_volume_20d");

                    b.Property<decimal>("Beta")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("beta");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("security_id");

                    b.Property<decimal>("ShortInterest")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("short_interest");

                    b.Property<decimal?>("Volatility90d")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("volatility_90d");

                    b.Property<decimal>("YtdReturn")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("ytd_return");

                    b.HasKey("EquityRiskId")
                        .HasName("PK__Equity_R__9121C4491F12451E");

                    b.HasIndex("SecurityId");

                    b.ToTable("Equity_Risk", (string)null);
                });

            modelBuilder.Entity("SecMasterTestApp.Models.EquitySecurityDetail", b =>
                {
                    b.Property<int>("EquitySecurityDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("equity_security_detail_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Equity_security_Sequence])");

                    b.Property<string>("AdrUnderlyingCurrency")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("adr_underlying_currency");

                    b.Property<string>("AdrUnderlyingTicker")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("adr_underlying_ticker");

                    b.Property<DateOnly?>("IpoDate")
                        .HasColumnType("date")
                        .HasColumnName("ipo_date");

                    b.Property<decimal?>("OutstandingShares")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("outstanding_shares");

                    b.Property<string>("PriceCurrency")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("price_currency");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("security_id");

                    b.Property<int?>("SettleDays")
                        .HasColumnType("int")
                        .HasColumnName("settle_days");

                    b.Property<int?>("SharesPerAdr")
                        .HasColumnType("int")
                        .HasColumnName("shares_per_adr");

                    b.Property<decimal?>("VoteRightPerShare")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("vote_right_per_share");

                    b.HasKey("EquitySecurityDetailId")
                        .HasName("PK__Equity_S__983EF8452F191EF2");

                    b.HasIndex("SecurityId");

                    b.ToTable("Equity_Security_Details", (string)null);
                });

            modelBuilder.Entity("SecMasterTestApp.Models.Identifier", b =>
                {
                    b.Property<int>("IdentifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("identifier_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Identifier_Sequence])");

                    b.Property<int>("IdenitiferType")
                        .HasColumnType("int")
                        .HasColumnName("idenitifer_type");

                    b.Property<string>("IdentifierValue")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("identifier_value");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("security_id");

                    b.HasKey("IdentifierId")
                        .HasName("PK__Identifi__57C4F6DC63CBAF16");

                    b.HasIndex("IdenitiferType");

                    b.HasIndex("SecurityId");

                    b.ToTable("Identifiers");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.IdentifierType", b =>
                {
                    b.Property<int>("IdentifierTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("identifier_type_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Identifier_type_Sequence])");

                    b.Property<string>("IdentifierType1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("identifier_type");

                    b.HasKey("IdentifierTypeId")
                        .HasName("PK__Identifi__0CA15AA27DF812D5");

                    b.ToTable("Identifier_Types", (string)null);
                });

            modelBuilder.Entity("SecMasterTestApp.Models.PricingDetail", b =>
                {
                    b.Property<int>("PricingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pricing_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Pricing_Sequence])");

                    b.Property<decimal?>("AskPrice")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("ask_price");

                    b.Property<decimal?>("BidPrice")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("bid_price");

                    b.Property<decimal?>("LastPrice")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("last_price");

                    b.Property<decimal?>("OpenPrice")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("open_price");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("security_id");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("volume");

                    b.HasKey("PricingId")
                        .HasName("PK__Pricing___A25A9FB70BB56EF8");

                    b.HasIndex("SecurityId");

                    b.ToTable("Pricing_Details", (string)null);
                });

            modelBuilder.Entity("SecMasterTestApp.Models.ReferenceDatum", b =>
                {
                    b.Property<int>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reference_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Reference_data_Sequence])");

                    b.Property<string>("BloomberSubGroup")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("bloomber_subGroup");

                    b.Property<string>("BloombergGroup")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("bloomberg_group");

                    b.Property<string>("BloombergSector")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("bloomberg_sector");

                    b.Property<string>("IssueCurrency")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("issue_currency");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("issuer");

                    b.Property<string>("IssuerCountry")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("issuer_country");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("security_id");

                    b.HasKey("ReferenceId")
                        .HasName("PK__Referenc__8E860B28AA867DB0");

                    b.HasIndex("SecurityId");

                    b.ToTable("Reference_Data", (string)null);
                });

            modelBuilder.Entity("SecMasterTestApp.Models.RegulatoryDetail", b =>
                {
                    b.Property<int>("RegulatoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("regulatory_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Regulatory_details_Sequence])");

                    b.Property<string>("PfAssetClass")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("pf_asset_class");

                    b.Property<string>("PfCountry")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("pf_country");

                    b.Property<string>("PfCreditRating")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("pf_credit_rating");

                    b.Property<string>("PfCurrency")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("pf_currency");

                    b.Property<string>("PfInstrument")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("pf_instrument");

                    b.Property<string>("PfLiquidity")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("pf_liquidity");

                    b.Property<string>("PfMaturity")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("pf_maturity");

                    b.Property<string>("PfNaicsCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("pf_NAICS_code");

                    b.Property<string>("PfRegion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("pf_region");

                    b.Property<string>("PfSector")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("pf_sector");

                    b.Property<string>("PfSubAssetClass")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("pf_sub_asset_class");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("security_id");

                    b.HasKey("RegulatoryId")
                        .HasName("PK__Regulato__CE5849C94D9A2623");

                    b.HasIndex("SecurityId");

                    b.ToTable("Regulatory_Details", (string)null);
                });

            modelBuilder.Entity("SecMasterTestApp.Models.Security", b =>
                {
                    b.Property<int>("SecurityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("security_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [SecurityID_Sequence])");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("SecurityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("security_name");

                    b.Property<int>("SecurityType")
                        .HasColumnType("int")
                        .HasColumnName("security_type");

                    b.HasKey("SecurityId")
                        .HasName("PK__Securiti__46647BD1C6BC2815");

                    b.HasIndex("SecurityType");

                    b.ToTable("Securities");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.SecurityType", b =>
                {
                    b.Property<int>("SecurityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("security_type_id")
                        .HasDefaultValueSql("(NEXT VALUE FOR [Security_type_id_Sequence])");

                    b.Property<string>("SecurityType1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("security_type");

                    b.HasKey("SecurityTypeId")
                        .HasName("PK__Security__4EE38F369F7DC877");

                    b.ToTable("Security_types", (string)null);
                });

            modelBuilder.Entity("SecMasterTestApp.Models.BondPricingDetail", b =>
                {
                    b.HasOne("SecMasterTestApp.Models.PricingDetail", "PricingDetails")
                        .WithMany("BondPricingDetails")
                        .HasForeignKey("PricingDetailsId")
                        .IsRequired()
                        .HasConstraintName("FK__Bond_Pric__prici__04E4BC85");

                    b.Navigation("PricingDetails");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.BondRisk", b =>
                {
                    b.HasOne("SecMasterTestApp.Models.Security", "Security")
                        .WithMany("BondRisks")
                        .HasForeignKey("SecurityId")
                        .IsRequired()
                        .HasConstraintName("FK__Bond_Risk__secur__5DCAEF64");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.BondSchedule", b =>
                {
                    b.HasOne("SecMasterTestApp.Models.BondScheduleType", "ScheduleTypeNavigation")
                        .WithMany("BondSchedules")
                        .HasForeignKey("ScheduleType")
                        .HasConstraintName("FK__Bond_Sche__sched__10566F31");

                    b.HasOne("SecMasterTestApp.Models.Security", "Security")
                        .WithMany("BondSchedules")
                        .HasForeignKey("SecurityId")
                        .HasConstraintName("FK__Bond_Sche__secur__0F624AF8");

                    b.Navigation("ScheduleTypeNavigation");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.BondSecurityDetail", b =>
                {
                    b.HasOne("SecMasterTestApp.Models.Security", "Security")
                        .WithMany("BondSecurityDetails")
                        .HasForeignKey("SecurityId")
                        .IsRequired()
                        .HasConstraintName("FK__Bond_Secu__secur__6E01572D");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.BondsSecuritySummary", b =>
                {
                    b.HasOne("SecMasterTestApp.Models.Security", "Security")
                        .WithMany("BondsSecuritySummaries")
                        .HasForeignKey("SecurityId")
                        .HasConstraintName("FK__Bonds_Sec__secur__5629CD9C");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.EquitiesSecuritySummary", b =>
                {
                    b.HasOne("SecMasterTestApp.Models.Security", "Security")
                        .WithMany("EquitiesSecuritySummaries")
                        .HasForeignKey("SecurityId")
                        .HasConstraintName("FK__Equities___secur__5165187F");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.EquityDividendHistory", b =>
                {
                    b.HasOne("SecMasterTestApp.Models.Security", "Security")
                        .WithMany("EquityDividendHistories")
                        .HasForeignKey("SecurityId")
                        .IsRequired()
                        .HasConstraintName("FK__Equity_Di__secur__08B54D69");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.EquityPricingDetail", b =>
                {
                    b.HasOne("SecMasterTestApp.Models.PricingDetail", "PricingDetails")
                        .WithMany("EquityPricingDetails")
                        .HasForeignKey("PricingDetailsId")
                        .IsRequired()
                        .HasConstraintName("FK__Equity_Pr__prici__01142BA1");

                    b.Navigation("PricingDetails");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.EquityReferenceDatum", b =>
                {
                    b.HasOne("SecMasterTestApp.Models.ReferenceDatum", "Reference")
                        .WithMany("EquityReferenceData")
                        .HasForeignKey("ReferenceId")
                        .IsRequired()
                        .HasConstraintName("FK__Equity_re__refer__797309D9");

                    b.Navigation("Reference");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.EquityRisk", b =>
                {
                    b.HasOne("SecMasterTestApp.Models.Security", "Security")
                        .WithMany("EquityRisks")
                        .HasForeignKey("SecurityId")
                        .IsRequired()
                        .HasConstraintName("FK__Equity_Ri__secur__59FA5E80");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.EquitySecurityDetail", b =>
                {
                    b.HasOne("SecMasterTestApp.Models.Security", "Security")
                        .WithMany("EquitySecurityDetails")
                        .HasForeignKey("SecurityId")
                        .IsRequired()
                        .HasConstraintName("FK__Equity_Se__secur__6A30C649");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.Identifier", b =>
                {
                    b.HasOne("SecMasterTestApp.Models.IdentifierType", "IdenitiferTypeNavigation")
                        .WithMany("Identifiers")
                        .HasForeignKey("IdenitiferType")
                        .IsRequired()
                        .HasConstraintName("FK__Identifie__ideni__66603565");

                    b.HasOne("SecMasterTestApp.Models.Security", "Security")
                        .WithMany("Identifiers")
                        .HasForeignKey("SecurityId")
                        .IsRequired()
                        .HasConstraintName("FK__Identifie__secur__656C112C");

                    b.Navigation("IdenitiferTypeNavigation");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.PricingDetail", b =>
                {
                    b.HasOne("SecMasterTestApp.Models.Security", "Security")
                        .WithMany("PricingDetails")
                        .HasForeignKey("SecurityId")
                        .IsRequired()
                        .HasConstraintName("FK__Pricing_D__secur__7D439ABD");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.ReferenceDatum", b =>
                {
                    b.HasOne("SecMasterTestApp.Models.Security", "Security")
                        .WithMany("ReferenceData")
                        .HasForeignKey("SecurityId")
                        .IsRequired()
                        .HasConstraintName("FK__Reference__secur__75A278F5");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.RegulatoryDetail", b =>
                {
                    b.HasOne("SecMasterTestApp.Models.Security", "Security")
                        .WithMany("RegulatoryDetails")
                        .HasForeignKey("SecurityId")
                        .IsRequired()
                        .HasConstraintName("FK__Regulator__secur__71D1E811");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.Security", b =>
                {
                    b.HasOne("SecMasterTestApp.Models.SecurityType", "SecurityTypeNavigation")
                        .WithMany("Securities")
                        .HasForeignKey("SecurityType")
                        .IsRequired()
                        .HasConstraintName("FK__Securitie__secur__4CA06362");

                    b.Navigation("SecurityTypeNavigation");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.BondScheduleType", b =>
                {
                    b.Navigation("BondSchedules");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.IdentifierType", b =>
                {
                    b.Navigation("Identifiers");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.PricingDetail", b =>
                {
                    b.Navigation("BondPricingDetails");

                    b.Navigation("EquityPricingDetails");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.ReferenceDatum", b =>
                {
                    b.Navigation("EquityReferenceData");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.Security", b =>
                {
                    b.Navigation("BondRisks");

                    b.Navigation("BondSchedules");

                    b.Navigation("BondSecurityDetails");

                    b.Navigation("BondsSecuritySummaries");

                    b.Navigation("EquitiesSecuritySummaries");

                    b.Navigation("EquityDividendHistories");

                    b.Navigation("EquityRisks");

                    b.Navigation("EquitySecurityDetails");

                    b.Navigation("Identifiers");

                    b.Navigation("PricingDetails");

                    b.Navigation("ReferenceData");

                    b.Navigation("RegulatoryDetails");
                });

            modelBuilder.Entity("SecMasterTestApp.Models.SecurityType", b =>
                {
                    b.Navigation("Securities");
                });
#pragma warning restore 612, 618
        }
    }
}
